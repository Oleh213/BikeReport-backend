// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using task_backend.Context;

#nullable disable

namespace task_backend.Migrations
{
    [DbContext(typeof(ReportContext))]
    partial class ReportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("ReportServicePackage", b =>
                {
                    b.Property<Guid>("ReportsReportId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServicePackegesServicePackageId")
                        .HasColumnType("TEXT");

                    b.HasKey("ReportsReportId", "ServicePackegesServicePackageId");

                    b.HasIndex("ServicePackegesServicePackageId");

                    b.ToTable("ReportServicePackage");
                });

            modelBuilder.Entity("task_backend.Context.BikeBrand", b =>
                {
                    b.Property<Guid>("BikeBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BikeBrandId");

                    b.ToTable("BikeBrands");
                });

            modelBuilder.Entity("task_backend.Context.BikeType", b =>
                {
                    b.Property<Guid>("BikeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BikeTypeId");

                    b.ToTable("BikeTypes");
                });

            modelBuilder.Entity("task_backend.Context.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BikeBrandId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BikeTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxMoney")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceComponentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SureName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ReportId");

                    b.HasIndex("BikeBrandId");

                    b.HasIndex("BikeTypeId");

                    b.HasIndex("ServiceComponentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("task_backend.Context.ServiceComponent", b =>
                {
                    b.Property<Guid>("ServiceComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceComponentId");

                    b.ToTable("ServiceComponents");
                });

            modelBuilder.Entity("task_backend.Context.ServicePackage", b =>
                {
                    b.Property<Guid>("ServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ElectroBike")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServicePackageId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("ReportServicePackage", b =>
                {
                    b.HasOne("task_backend.Context.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportsReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("task_backend.Context.ServicePackage", null)
                        .WithMany()
                        .HasForeignKey("ServicePackegesServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("task_backend.Context.Report", b =>
                {
                    b.HasOne("task_backend.Context.BikeBrand", "BikeBrand")
                        .WithMany("Report")
                        .HasForeignKey("BikeBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("task_backend.Context.BikeType", "BikeType")
                        .WithMany("Report")
                        .HasForeignKey("BikeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("task_backend.Context.ServiceComponent", "ServiceComponent")
                        .WithMany("Report")
                        .HasForeignKey("ServiceComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BikeBrand");

                    b.Navigation("BikeType");

                    b.Navigation("ServiceComponent");
                });

            modelBuilder.Entity("task_backend.Context.BikeBrand", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("task_backend.Context.BikeType", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("task_backend.Context.ServiceComponent", b =>
                {
                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
